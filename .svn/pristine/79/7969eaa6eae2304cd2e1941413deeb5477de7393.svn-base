using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Text;
using System.IO;
using System.Xml;
using Com.Alipay;
using Domain.Entity;
using FytMsys.Common;
using FytMsys.Helper;

namespace FytMsys.Web.Controllers
{
    /// <summary>
    /// 支付宝
    /// </summary>
    public class AlipaysController : Controller
    {
        /// <summary>
        /// 生成订单
        /// </summary>
        /// <returns></returns>
        public ActionResult Index()
        {
            ////////////////////////////////////////////请求参数////////////////////////////////////////////

            //支付类型
            string payment_type = "1";
            //必填，不能修改
            //服务器异步通知页面路径
            string notify_url = ConfigHelper.GetConfigString("aliapy_notify");
            //需http://格式的完整路径，不能加?id=123这类自定义参数

            //页面跳转同步通知页面路径
            string return_url = ConfigHelper.GetConfigString("aliapy_return");
            //需http://格式的完整路径，不能加?id=123这类自定义参数，不能写成http://localhost/

            //商户订单号
            string out_trade_no = FytRequest.GetQueryStringEncode("o");
            //商户网站订单系统中唯一订单号，必填

            //订单名称
            string subject = FytRequest.GetQueryStringEncode("t");
            //必填

            //付款金额
            string total_fee = FytRequest.GetQueryStringEncode("m");
            //必填

            //订单描述

            string body = FytRequest.GetQueryStringEncode("re");
            //商品展示地址
            string show_url = ConfigHelper.GetConfigString("aliapy_product");
            //需以http://开头的完整路径，例如：http://www.商户网址.com/myorder.html

            //防钓鱼时间戳
            string anti_phishing_key = "";
            //若要使用请调用类文件submit中的query_timestamp函数

            //客户端的IP地址
            string exter_invoke_ip = "";
            //非局域网的外网IP地址，如：221.0.0.1


            ////////////////////////////////////////////////////////////////////////////////////////////////

            //把请求参数打包成数组
            var sParaTemp = new SortedDictionary<string, string>
            {
                {"partner", Com.Alipay.Config.Partner},
                {"seller_email", Com.Alipay.Config.Seller_email},
                {"_input_charset", Com.Alipay.Config.Input_charset.ToLower()},
                {"service", "create_direct_pay_by_user"},
                {"payment_type", payment_type},
                {"notify_url", notify_url},
                {"return_url", return_url},
                {"out_trade_no", out_trade_no},
                {"subject", subject},
                {"total_fee", total_fee},
                {"body", body},
                {"show_url", show_url},
                {"anti_phishing_key", anti_phishing_key},
                {"exter_invoke_ip", exter_invoke_ip}
            };

            //建立请求
            string sHtmlText = Submit.BuildRequest(sParaTemp, "get", "确认");
            return Content(sHtmlText);
        }

        #region 服务器异步通知页面文件 +NotifyUrl
        /// <summary>
        /// 服务器异步通知页面文件
        /// </summary>
        /// <returns></returns>
        public ActionResult NotifyUrl()
        {
            var sPara = GetRequestPost();

            if (sPara.Count > 0)//判断是否有带返回参数
            {
                var aliNotify = new Notify();
                bool verifyResult = aliNotify.Verify(sPara, Request.Form["notify_id"], Request.Form["sign"]);

                if (verifyResult)//验证成功
                {
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //请在这里加上商户的业务逻辑程序代码


                    //——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
                    //获取支付宝的通知返回参数，可参考技术文档中服务器异步通知参数列表

                    //商户订单号

                    string out_trade_no = Request.Form["out_trade_no"];

                    //支付宝交易号

                    string trade_no = Request.Form["trade_no"];

                    //交易状态
                    string trade_status = Request.Form["trade_status"];


                    if (Request.Form["trade_status"] == "TRADE_FINISHED")
                    {
                        //判断该笔订单是否在商户网站中已经做过处理
                        //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                        //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的
                        //如果有做过处理，不执行商户的业务程序

                        //注意：
                        //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
                    }
                    else if (Request.Form["trade_status"] == "TRADE_SUCCESS")
                    {
                        //判断该笔订单是否在商户网站中已经做过处理
                        //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                        //请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的
                        //如果有做过处理，不执行商户的业务程序
                        //根据订单号判断金额是否正确
                        var oModel = OperateContext<lv_ProjectOrder>.SetServer.GetModel(m => m.Number == out_trade_no);
                        if (oModel != null)
                        {
                            if (oModel.PayStatus == 1)
                            {
                                return Content("success");
                            }
                            var total_fee = Request.Form["total_fee"];
                            var np = Math.Round(oModel.PayPrice, 0); //订单金额，转换成分，进行对比
                            //判断金额是否相等
                            if (Convert.ToInt32(np) == Convert.ToInt32(total_fee))
                            {
                                oModel.PayStatus = 1; //更改支付状态
                                oModel.Status = true; //更改订单状态
                                OperateContext<lv_ProjectOrder>.SetServer.Update(oModel);
                                //成功跳转
                                return Content("success");
                            }
                            else
                            {
                                return Content("支付金额不符合");
                            }
                        }
                        else
                        {
                            return Content("即时到账支付失败");
                        }
                        //注意：
                        //付款完成后，支付宝系统发送该交易状态通知
                    }
                    else
                    {
                    }

                    //——请根据您的业务逻辑来编写程序（以上代码仅作参考）——

                    return Content("success");//请不要修改或删除

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }
                else//验证失败
                {
                    return Content("fail");
                }
            }
            else
            {
                return Content("无通知参数");
            }
        }
        #endregion

        #region 页面跳转同步通知文件 +ReturnUrl
        /// <summary>
        /// 页面跳转同步通知文件
        /// </summary>
        /// <returns></returns>
        public ActionResult ReturnUrl()
        {
            SortedDictionary<string, string> sPara = GetRequestGet();

            if (sPara.Count > 0)//判断是否有带返回参数
            {
                Notify aliNotify = new Notify();
                bool verifyResult = aliNotify.Verify(sPara, Request.QueryString["notify_id"], Request.QueryString["sign"]);

                if (verifyResult)//验证成功
                {
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //请在这里加上商户的业务逻辑程序代码


                    //——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
                    //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表

                    //商户订单号

                    string out_trade_no = Request.QueryString["out_trade_no"];

                    //支付宝交易号

                    string trade_no = Request.QueryString["trade_no"];

                    //交易状态
                    string trade_status = Request.QueryString["trade_status"];


                    if (Request.QueryString["trade_status"] == "TRADE_FINISHED" || Request.QueryString["trade_status"] == "TRADE_SUCCESS")
                    {
                        //判断该笔订单是否在商户网站中已经做过处理
                        //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                        //如果有做过处理，不执行商户的业务程序

                        //根据订单号判断支付类型
                        var header = out_trade_no.Substring(0, 2);
                        if (header == "WD")
                        {
                            //我等你
                            var oModel = OperateContext<lv_ProjectOrder>.SetServer.GetModel(m => m.Number == out_trade_no);
                            if (oModel != null)
                            {
                                if (oModel.PayStatus == 1)
                                {
                                    return RedirectToAction("PaySuccess", "ProJect", new { o = out_trade_no });
                                }
                                var total_fee = Request.Form["total_fee"];
                                var np = Math.Round(oModel.PayPrice, 0); //订单金额，转换成分，进行对比
                                //判断金额是否相等
                                if (Convert.ToInt32(np) == Convert.ToInt32(total_fee))
                                {
                                    oModel.PayStatus = 1; //更改支付状态
                                    oModel.Status = true; //更改订单状态
                                    OperateContext<lv_ProjectOrder>.SetServer.Update(oModel);
                                    //生成参与用户财务日志
                                    var uml = new tb_UserMoneyLog()
                                    {
                                        Number = UtilsHelper.GetRamCode(),
                                        UserId = oModel.UserId,
                                        Option = 1,
                                        Price = oModel.PayPrice,
                                        RealPrice = 0,
                                        NowPrice = 0,
                                        Status = 1,
                                        PayType = "支付宝",
                                        Summary = "支付我等你旅游项目",
                                        AddDate = DateTime.Now,
                                    };
                                    OperateContext<tb_UserMoneyLog>.SetServer.Add(uml);
                                    var project = OperateContext<lv_ProJect>.SetServer.GetModel(m => m.ID == oModel.ProJectId);
                                    //发送一条预约消息
                                    var message = new lv_Message()
                                    {
                                        SendUserId = oModel.UserId,
                                        GoUserId = project.UserId,
                                        Centents = "我预约了你的[" + project.Title + "]",
                                        IsRead = false,
                                        AddTime = DateTime.Now
                                    };
                                    OperateContext<lv_Message>.SetServer.Add(message);
                                    //成功跳转
                                    return RedirectToAction("PaySuccess", "ProJect", new { o = out_trade_no });
                                }
                                else
                                {
                                    return Content("支付金额不符合");
                                }
                            }
                            else
                            {
                                return Content("即时到账支付失败");
                            }
                        }
                        else if (header == "QK")
                        {
                            //去看看
                            var oModel = OperateContext<lv_GoLookOrder>.SetServer.GetModel(m => m.Number == out_trade_no);
                            if (oModel != null)
                            {
                                if (oModel.PayStatus == 1)
                                {
                                    return RedirectToAction("PaySuccess", "ProJect", new { o = out_trade_no });
                                }
                                var total_fee = Request.Form["total_fee"];
                                var np = Math.Round(oModel.PayPrice, 0); //订单金额，转换成分，进行对比
                                //判断金额是否相等
                                if (Convert.ToInt32(np) == Convert.ToInt32(total_fee))
                                {
                                    oModel.PayStatus = 1; //更改支付状态
                                    OperateContext<lv_GoLookOrder>.SetServer.Update(oModel);
                                    //生成参与用户财务日志
                                    var uml = new tb_UserMoneyLog()
                                    {
                                        Number = UtilsHelper.GetRamCode(),
                                        UserId = oModel.UserId,
                                        Option = 1,
                                        Price = oModel.PayPrice,
                                        RealPrice = 0,
                                        NowPrice = 0,
                                        Status = 1,
                                        PayType = "支付宝",
                                        Summary = "支付去看看旅游项目",
                                        AddDate = DateTime.Now,
                                    };
                                    OperateContext<tb_UserMoneyLog>.SetServer.Add(uml);
                                    var look = OperateContext<lv_GoLook>.SetServer.GetModel(m => m.ID == oModel.LookId);
                                    //发送一条预约消息
                                    var message = new lv_Message()
                                    {
                                        SendUserId = oModel.UserId,
                                        GoUserId = look.UserId,
                                        Centents = "我参与了你的[" + look.Title + "]",
                                        IsRead = false,
                                        AddTime = DateTime.Now
                                    };
                                    OperateContext<lv_Message>.SetServer.Add(message);
                                    //成功跳转
                                    return RedirectToAction("PaySuccess", "GoLook", new { o = out_trade_no });
                                }
                                else
                                {
                                    return Content("支付金额不符合");
                                }
                            }
                            else
                            {
                                return Content("即时到账支付失败");
                            }
                        }
                    }
                    else
                    {
                        Response.Write("trade_status=" + Request.QueryString["trade_status"]);
                        var header = out_trade_no.Substring(0, 2);
                        if (header == "WD")
                        {
                            OperateContext<lv_ProjectOrder>.SetServer.DeleteBy(m => m.Number == out_trade_no);
                        }
                        else if (header == "QK")
                        {
                            OperateContext<lv_GoLookOrder>.SetServer.DeleteBy(m => m.Number == out_trade_no);
                        }
                    }

                    return RedirectToAction("PayFailed", "Account", new { o = out_trade_no });

                    //——请根据您的业务逻辑来编写程序（以上代码仅作参考）——

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }
                else//验证失败
                {
                    return Content("验证失败");
                }
            }
            else
            {
                return Content("无返回参数");
            }
            return Content("无返回参数");
        }
        #endregion


        /// <summary>
        /// 获取支付宝GET过来通知消息，并以“参数名=参数值”的形式组成数组
        /// </summary>
        /// <returns>request回来的信息组成的数组</returns>
        public SortedDictionary<string, string> GetRequestGet()
        {
            int i = 0;
            SortedDictionary<string, string> sArray = new SortedDictionary<string, string>();
            NameValueCollection coll;
            //Load Form variables into NameValueCollection variable.
            coll = Request.QueryString;

            // Get names of all forms into a string array.
            String[] requestItem = coll.AllKeys;

            for (i = 0; i < requestItem.Length; i++)
            {
                sArray.Add(requestItem[i], Request.QueryString[requestItem[i]]);
            }

            return sArray;
        }

        /// <summary>
        /// 获取支付宝POST过来通知消息，并以“参数名=参数值”的形式组成数组
        /// </summary>
        /// <returns>request回来的信息组成的数组</returns>
        public SortedDictionary<string, string> GetRequestPost()
        {
            int i = 0;
            SortedDictionary<string, string> sArray = new SortedDictionary<string, string>();
            NameValueCollection coll;
            //Load Form variables into NameValueCollection variable.
            coll = Request.Form;

            // Get names of all forms into a string array.
            String[] requestItem = coll.AllKeys;

            for (i = 0; i < requestItem.Length; i++)
            {
                sArray.Add(requestItem[i], Request.Form[requestItem[i]]);
            }

            return sArray;
        }
    }
}